import _ from 'lodash';
import Vector from '{{rootPath}}/Vector.js';
import ConstructorStore from '{{rootPath}}/ConstructorStore.js';
import {{typeFileData.context.constructorName}} from '{{typeFileData.filePath}}';
import {Deserializer, Serializer, BaseConstructor} from '{{binaryTransferPath}}';

// constructor header
const header = Buffer.alloc(4);
header.writeUInt32LE({{ predicate.id }}, 0);

// detailed params
const params = {{ params | dump | safe }};

class {{constructorName}} extends {{ typeFileData.context.constructorName }} {
    static _id = {{ predicate.id }};
    static _type = '{{ predicate.type }}';
    static _name = '{{ predicate.name }}';
    static _store = ConstructorStore;
    static _header = header;
    static _params = params;
    static _Vector = Vector;

    constructor(props = {}) {
        super({
            _id: {{ predicate.id }},
            _type: '{{ predicate.type }}',
            _name: '{{ predicate.name }}',
            _props: props,
            _header: header,
            _params: params,
        });
    }

    static createConstructor(props) {
        return new {{ constructorName }}(props);
    }

    createVector(...args) {
        return new Vector(...args);
    }
}

ConstructorStore.register({{ predicate.id }}, {{ constructorName }});

module.exports = {{ constructorName }};
