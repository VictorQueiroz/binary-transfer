import Vector from '{{rootPath}}/Vector.js';
import ConstructorStore from '{{rootPath}}/ConstructorStore.js';
import {Deserializer, Serializer} from '{{binaryTransferPath}}';
import {{typeFileData.data.constructorName}} from '{{typeFileData.filePath}}';

const ctorName = '{{prefixedCtor}}';
const header = Buffer.alloc(4);
const params = [];

// constructor params
{% for param in properties %}
params.push('{{param}}');
{% endfor %}

// constructor header
header.writeUInt32LE({{id}}, 0);

class {{constructorName}} extends {{typeFileData.data.constructorName}} {
    static _id = {{id}};
    static _name = ctorName;
    static _type = '{{ctorType}}';
    static _header = header;

    constructor(props) {

        super({
            _id: {{id}},
            _name: ctorName,
            _props: props,
            _header: header,
            _params: params
        });
    }

    serialize() {
        return {{constructorName}}.encode(this);
    }

    static deserialize(deserializer) {
        return this.decode(deserializer);
    }

    static decode(deserializer) {
        const result = {};
        const header = deserializer._readBytes(4);

        if(process.env.NODE_ENV == 'development') {
            if(!header.equals(header)) {
                this.onError('Invalid header for %s. Expected for %s but got %s instead', this._name, header.readInt32LE(0), header.readInt32LE(0));
                return false;
            }
        }

        {% for param in params %}
            {% if param.generic %}
                result['{{param.key}}'] = deserializer.read{{param.method}}();
            {% elseif param.vector %}
                result['{{param.key}}'] = Vector.decode({
                    type: '{{param.type}}',
                    deserializer
                });
            {% elseif param.constructorReference or param.typeReference %}
                if(!this.Constructor) {
                    {% if param.constructorReference %}
                        this.Constructor = ConstructorStore.findConstructorFromName('{{param.type}}');
                    {% else %}
                        this.Constructor = ConstructorStore.findConstructorFromBuffer(deserializer.buffer.slice(deserializer.offset));
                    {% endif %}
                }

                result['{{param.key}}'] = this.Constructor.deserialize(deserializer);
            {% endif %}
        {% endfor %}

        return new {{constructorName}}(result);
    }

    static encode(object) {
        const serializer = new Serializer();

        // write header
        serializer.addBuffer(header);

        {% for param in params %}
            {% if param.generic %}
                serializer.write{{param.method}}(object['{{param.key}}']);
            {% else %}
                serializer.addBuffer(object['{{param.key}}']);
            {% endif %}
        {% endfor %}

        return serializer.getBuffer();
    }
}

ConstructorStore.register({{id}}, {{constructorName}});

module.exports = {{constructorName}};
